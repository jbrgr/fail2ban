[INCLUDES]

before = ufw.conf

[Definition]

# Option:  type
# Notes.:  type of the action.
# Values:  [ allports | multiport ]  Default: allports
#
type = allports

# Option:  mode
# Notes.:  mode of the action.
# Values:  [ standard | docker ]  Default: standard
#
mode = standard

actionban = if [ -n "<application>" ] && ufw app info "<application>"
                 then 
					<_ufw_for_proto-iter>
						<_ufw_add_rule> app "<application>" comment "<comment>"      
				    <_ufw_for_proto-done>
				  else
				  	<_ufw_for_proto-iter>
						<_ufw_add_rule> comment "<comment>"      
				    <_ufw_for_proto-done>
				  fi
			      <kill>

actionunban = if [ -n "<application>" ] && ufw app info "<application>"
                 then 
					<_ufw_for_proto-iter>
						<_ufw_del_rule> app "<application>"
				    <_ufw_for_proto-done>
				  else
				  	<_ufw_for_proto-iter>
						<_ufw_del_rule>      
				    <_ufw_for_proto-done>
				  fi

# Several capabilities used internaly:

_ufw_for_proto-iter = <ufw_<mode>/_for_proto_iter>
_ufw_for_proto-done = <ufw_<mode>/_for_proto_done>

_ufw_add_rule = ufw <_ufw_mode> <add> <blocktype> <_ufw_proto> from <ip> to <destination> <_ufw_port>
_ufw_del_rule =	ufw <_ufw_mode> delete <blocktype> <_ufw_proto> from <ip> to <destination> <_ufw_port>		  
			  
_ufw_mode = <ufw_<mode>/_mode>
_ufw_port = <ufw_<type>/_port>
_ufw_app = if [ -n "<application>" ] && ufw app info "<application>"
           then
             app "<application>"
           fi


[ufw_multiport]

_port = port <port>

[ufw_allports]

_port =

[ufw_standard]

_for_proto_iter =
_for_proto_done = 
_proto =
_mode =

[ufw_docker]

_for_proto_iter = for proto in $(echo '<protocol>' | sed 's/,/ /g'); do
_for_proto_done = done
_proto = proto $proto
_mode = route

[Init]

# Option:  port
# Notes.:  specifies port to monitor
# Values:  [ NUM | STRING ]  Default:
#
port = ssh

# Option:  protocol
# Notes.:  internally used by config reader for interpolations.
# Values:  [ tcp | udp | icmp | all ] Default: tcp
#
protocol = tcp
